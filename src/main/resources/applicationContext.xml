<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2014 Studentmediene i Trondheim AS
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:ldap="http://www.springframework.org/schema/ldap"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/ldap http://www.springframework.org/schema/ldap/spring-ldap.xsd">


    <!-- Load the momus.properties file, can use the values like ${property.name} -->
    <context:property-placeholder location="classpath*:momus.properties" order="2" />
    <!-- Override the values with our local properties -->
    <context:property-placeholder location="classpath*:local.properties" order="1" ignore-unresolvable="true" />


    <!-- ############################
            SECURITY
         ############################ -->

    <!-- Entry point is what Spring should do when not authorized, we use our simple
     one instead of the default (the default implementation asks for username&password, while we use token) -->
    <security:http entry-point-ref="tokenEntryPoint" use-expressions="true">

        <!-- Default rules for patterns. More fine-grained can (and should) be specified in the controllers -->
        <security:intercept-url pattern="/api/auth/**" access="permitAll" />
        <security:intercept-url pattern="/api/dev/**" access="${devmode}" /> <!-- Some utility stuff when developing -->
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()" />

    </security:http>

    <!-- Activate @PreAuthorize annotation for more fine-grained method access -->
    <security:global-method-security pre-post-annotations="enabled">
    </security:global-method-security>

    <!-- Add our token stuff to the manager -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="tokenAuthenticationProvider" />
    </security:authentication-manager>

    <!-- Instantiation of our auth classes -->
    <bean id="tokenEntryPoint" class="no.dusken.momus.authentication.TokenEntryPoint"/>


    <!-- ############################
            SERVLET
         ############################ -->

    <!-- Enable @Controllers with @RequestMapping etc. -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- Use the Hibernate JSON mapper instead of the default -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="no.dusken.momus.mapper.HibernateAwareObjectMapper" />
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- Disable cache for the API -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
            <property name="cacheSeconds" value="0" />
        </bean>
    </mvc:interceptors>

    <!-- In which packages to look for services etc. -->
    <context:component-scan base-package="no.dusken.momus" />

    <!-- Enable @Autowired etc. -->
    <context:annotation-config />

    <!-- Enable @Transactional -->
    <tx:annotation-driven />

    <!-- Enable @Scheduled -->
    <task:annotation-driven />


    <!-- Enable JPA -->
    <jpa:repositories base-package="no.dusken.momus.service.repository" />

    <!-- Connect to DB -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${dataSource.driver}" />
        <property name="url" value="${dataSource.url}" />
        <property name="username" value="${dataSource.username}" />
        <property name="password" value="${dataSource.password}" />

        <!-- How connections will be recycled.
             Every 30 minutes the connections will be checked if they are still active
         -->
        <property name="validationQuery" value="${dataSource.validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testWhileIdle" value="true" />
        <property name="timeBetweenEvictionRunsMillis" value="1800000" />
    </bean>

    <!-- Use the DB inside JPA managers -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${dataSource.databaseType}" />
                <property name="generateDdl" value="${dataSource.generateDdl}" />
                <property name="showSql" value="${dataSource.showSql}" />
            </bean>
        </property>
        <property name="persistenceUnitName" value="jpaPersistenceUnit" />
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>


    <!-- LDAP -->
    <ldap:context-source
            url="${ldap.url}"
            base="${ldap.base}"
            username="${ldap.username}"
            password="${ldap.password}"
            />

    <ldap:ldap-template id="ldapTemplate"/>


    <!-- Tell how liquibase should update/generate the database schema -->
    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="dataSource" />
        <property name="changeLog" value="classpath:db-changelog.xml" />
        <property name="contexts" value="${liquibase.contexts}" />
    </bean>


    <!-- Define our exceptionHandler as the resolver for our program -->
    <bean id="exceptionResolver" class="no.dusken.momus.exceptions.ExceptionHandler" />
</beans>